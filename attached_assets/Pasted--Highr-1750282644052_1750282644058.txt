
"""
نظام التعرف على المستخدمين وإدارة الصلاحيات - نسخة مستقلة
يمكن نسخه واستخدامه في أي مشروع Highrise Bot
"""

import json
import os
from datetime import datetime
from highrise import User
from highrise.models import *

class UserRecognitionSystem:
    def __init__(self, data_folder="user_data"):
        """
        تهيئة نظام التعرف على المستخدمين
        
        Args:
            data_folder (str): مجلد حفظ البيانات
        """
        self.data_folder = data_folder
        self.users_file = f"{data_folder}/users_data.json"
        self.moderators_file = f"{data_folder}/moderators_data.json"
        
        # قوائم المستخدمين والصلاحيات
        self.room_moderators = []  # قائمة مشرفي الغرفة
        self.room_owner = None     # مالك الغرفة
        self.room_king = None      # ملك الغرفة
        self.room_queen = None     # ملكة الغرفة
        
        # بيانات المستخدمين
        self.users_data = {}
        
        # تهيئة النظام
        self._initialize_system()

    def _initialize_system(self):
        """تهيئة النظام وتحميل البيانات"""
        # إنشاء مجلد البيانات
        os.makedirs(self.data_folder, exist_ok=True)
        
        # تحميل البيانات
        self.users_data = self._load_users_data()
        self._load_moderators_data()
        
        print(f"✅ تم تهيئة نظام التعرف على المستخدمين")
        print(f"📁 مجلد البيانات: {self.data_folder}")
        print(f"👥 عدد المستخدمين المسجلين: {len(self.users_data)}")
        print(f"👮‍♂️ عدد المشرفين: {len(self.room_moderators)}")

    def _load_users_data(self):
        """تحميل بيانات المستخدمين من الملف"""
        try:
            if os.path.exists(self.users_file):
                with open(self.users_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"خطأ في تحميل بيانات المستخدمين: {e}")
            return {}

    def _save_users_data(self):
        """حفظ بيانات المستخدمين في الملف"""
        try:
            with open(self.users_file, 'w', encoding='utf-8') as f:
                json.dump(self.users_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"خطأ في حفظ بيانات المستخدمين: {e}")

    def _load_moderators_data(self):
        """تحميل قائمة المشرفين من الملف"""
        try:
            if os.path.exists(self.moderators_file):
                with open(self.moderators_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.room_moderators = data.get("room_moderators", [])
                    self.room_owner = data.get("room_owner", None)
                    self.room_king = data.get("room_king", None)
                    self.room_queen = data.get("room_queen", None)
                    print(f"✅ تم تحميل قائمة المشرفين: {len(self.room_moderators)} مشرف")
            else:
                print("📁 ملف المشرفين غير موجود، سيتم إنشاؤه عند إضافة أول مشرف")
        except Exception as e:
            print(f"خطأ في تحميل قائمة المشرفين: {e}")
            self.room_moderators = []

    def _save_moderators_data(self):
        """حفظ قائمة المشرفين في الملف"""
        try:
            data = {
                "room_moderators": self.room_moderators,
                "room_owner": self.room_owner,
                "room_king": self.room_king,
                "room_queen": self.room_queen
            }
            with open(self.moderators_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"💾 تم حفظ قائمة المشرفين: {len(self.room_moderators)} مشرف")
        except Exception as e:
            print(f"خطأ في حفظ قائمة المشرفين: {e}")

    def register_user(self, user: User):
        """
        تسجيل مستخدم جديد أو تحديث بياناته
        
        Args:
            user (User): كائن المستخدم من Highrise
            
        Returns:
            dict: بيانات المستخدم المحدثة
        """
        user_id = user.id
        current_time = datetime.now().isoformat()

        if user_id not in self.users_data:
            # مستخدم جديد
            self.users_data[user_id] = {
                "username": user.username,
                "first_seen": current_time,
                "last_seen": current_time,
                "visit_count": 1,
                "user_type": "visitor",
                "is_active": True
            }
            print(f"✅ تم تسجيل مستخدم جديد: {user.username}")
        else:
            # مستخدم موجود - تحديث البيانات
            self.users_data[user_id]["username"] = user.username
            self.users_data[user_id]["last_seen"] = current_time
            self.users_data[user_id]["visit_count"] += 1
            self.users_data[user_id]["is_active"] = True

        self._save_users_data()
        return self.users_data[user_id]

    def get_user_info(self, user_id: str):
        """
        الحصول على معلومات مستخدم
        
        Args:
            user_id (str): معرف المستخدم
            
        Returns:
            dict or None: بيانات المستخدم أو None
        """
        return self.users_data.get(user_id, None)

    def get_user_type(self, user: User):
        """
        تحديد نوع المستخدم بناءً على الصلاحيات والأدوار
        
        Args:
            user (User): كائن المستخدم
            
        Returns:
            str: نوع المستخدم
        """
        user_id = user.id

        # المطور الأساسي للبوت - يمكن تغيير الاسم حسب مشروعك
        if user.username == "VECTOR000":  # غير هذا الاسم حسب حاجتك
            return "bot_developer"

        # الملك والملكة - أولوية عالية
        if self.room_king and user_id == self.room_king:
            return "room_king"

        if self.room_queen and user_id == self.room_queen:
            return "room_queen"

        # مالك الغرفة
        if self.room_owner and user_id == self.room_owner:
            return "room_owner"

        # مشرفي الغرفة
        if user_id in self.room_moderators:
            return "moderator"

        # التحقق من قاعدة البيانات للأنواع الأخرى
        user_data = self.get_user_info(user_id)
        if user_data:
            stored_type = user_data.get("user_type", "visitor")
            if stored_type in ["moderator_designer", "designer", "room_owner", "room_king", "room_queen"]:
                return stored_type

        # إذا لم يكن له أي صلاحيات، فهو زائر
        return "visitor"

    async def check_room_privileges(self, bot, user: User):
        """
        فحص صلاحيات المستخدم من إعدادات الغرفة
        
        Args:
            bot: كائن البوت
            user (User): المستخدم المراد فحصه
            
        Returns:
            str: نوع المستخدم بعد الفحص
        """
        try:
            # فحص المطور الأساسي أولاً
            if user.username == "VECTOR000":  # غير هذا الاسم حسب حاجتك
                print(f"🔱 تم التعرف على {user.username} كمطور البوت")
                return "bot_developer"

            # فحص قائمة مالكي الغرف المعروفين - يمكن تخصيصها
            known_room_owners = ["E__X", "selAbu_Nasser_711_"]  # غير هذه القائمة حسب حاجتك
            if user.username in known_room_owners:
                self.room_owner = user.id
                self.set_user_type(user.id, "room_owner")
                print(f"👑 تم التعرف على {user.username} كمالك الغرفة (قائمة معروفة)")
                return "room_owner"

            # الحصول على صلاحيات المستخدم من إعدادات الغرفة
            room_privileges = await bot.highrise.get_room_privilege(user.id)
            print(f"🔍 فحص صلاحيات {user.username} من إعدادات الغرفة: {room_privileges}")

            # معالجة البيانات حسب نوع الإرجاع
            is_moderator = False
            is_designer = False
            is_owner = False

            if hasattr(room_privileges, 'moderator') and hasattr(room_privileges, 'designer'):
                # نوع RoomPermissions
                is_moderator = room_privileges.moderator
                is_designer = room_privileges.designer
                print(f"📊 تحليل صلاحيات {user.username}: مشرف={is_moderator}, مصمم={is_designer}")

            elif hasattr(room_privileges, 'privilege'):
                # نوع نص
                privilege = room_privileges.privilege
                if privilege == "owner":
                    is_owner = True
                elif privilege == "moderator":
                    is_moderator = True
                print(f"📊 صلاحية {user.username}: {privilege}")

            # تحديد نوع المستخدم بناءً على البيانات
            if is_owner:
                self.room_owner = user.id
                self.set_user_type(user.id, "room_owner")
                print(f"👑 تم التعرف على {user.username} كمالك الغرفة (من Highrise)")
                return "room_owner"

            elif is_moderator and is_designer:
                # مشرف ومصمم
                if user.id not in self.room_moderators:
                    self.room_moderators.append(user.id)
                    self._save_moderators_data()
                self.set_user_type(user.id, "moderator_designer")
                print(f"👮‍♂️🎨 تم التعرف على {user.username} كمشرف ومصمم")
                return "moderator_designer"

            elif is_moderator:
                # مشرف فقط
                if user.id not in self.room_moderators:
                    self.room_moderators.append(user.id)
                    self._save_moderators_data()
                self.set_user_type(user.id, "moderator")
                print(f"👮‍♂️ تم التعرف على {user.username} كمشرف")
                return "moderator"

            elif is_designer:
                # مصمم فقط
                self.set_user_type(user.id, "designer")
                print(f"🎨 تم التعرف على {user.username} كمصمم")
                return "designer"

            # إذا لم يكن له أي صلاحيات خاصة، فهو زائر
            self.set_user_type(user.id, "visitor")
            print(f"👤 تم التعرف على {user.username} كزائر")
            return "visitor"

        except Exception as e:
            print(f"⚠️ خطأ في فحص صلاحيات {user.username}: {e}")

            # كحل احتياطي للمطور فقط
            if user.username == "VECTOR000":  # غير هذا الاسم حسب حاجتك
                print(f"🔧 حل احتياطي: {user.username} مطور البوت")
                return "bot_developer"

            # فحص قائمة المالكين المعروفين كحل احتياطي
            known_room_owners = ["E__X", "selAbu_Nasser_711_"]  # غير هذه القائمة حسب حاجتك
            if user.username in known_room_owners:
                self.room_owner = user.id
                self.set_user_type(user.id, "room_owner")
                print(f"🔧 حل احتياطي: {user.username} مالك الغرفة")
                return "room_owner"

            # باقي المستخدمين يصبحوا زوار
            self.set_user_type(user.id, "visitor")
            print(f"🔧 حل احتياطي: {user.username} زائر")
            return "visitor"

    def check_permissions(self, user: User, required_permission: str):
        """
        فحص صلاحيات المستخدم
        
        Args:
            user (User): المستخدم
            required_permission (str): الصلاحية المطلوبة
            
        Returns:
            bool: True إذا كان لديه الصلاحية
        """
        user_type = self.get_user_type(user)

        print(f"🔍 فحص صلاحيات {user.username}: نوع المستخدم = {user_type}, الصلاحية المطلوبة = {required_permission}")

        # المطور له جميع الصلاحيات
        if user_type == "bot_developer":
            print(f"✅ {user.username} صلاحيات {required_permission}: True (مطور)")
            return True

        # صلاحيات المطور
        if required_permission == "developer":
            result = user_type == "bot_developer"
            print(f"{'✅' if result else '❌'} {user.username} صلاحيات المطور: {result}")
            return result

        # مالك الغرفة
        if required_permission == "owner":
            result = user_type in ["bot_developer", "room_owner"]
            print(f"{'✅' if result else '❌'} {user.username} صلاحيات المالك: {result}")
            return result

        # صلاحيات الإشراف
        if required_permission == "moderate":
            # فحص مباشر من قائمة المشرفين الحقيقية
            is_real_moderator = user.id in self.room_moderators
            
            result = (user_type in ["bot_developer", "room_owner", "moderator", "moderator_designer", "room_king", "room_queen"] 
                     or is_real_moderator)
            
            print(f"{'✅' if result else '❌'} {user.username} صلاحيات الإشراف: {result}")
            print(f"  📋 في قائمة المشرفين: {is_real_moderator}")
            print(f"  📊 نوع المستخدم: {user_type}")
            
            return result

        return False

    def set_user_type(self, user_id: str, user_type: str):
        """
        تحديد نوع المستخدم
        
        Args:
            user_id (str): معرف المستخدم
            user_type (str): نوع المستخدم الجديد
            
        Returns:
            bool: True إذا تم التحديث بنجاح
        """
        if user_id in self.users_data:
            self.users_data[user_id]["user_type"] = user_type
            self._save_users_data()
            return True
        return False

    def set_room_king(self, user_id: str):
        """تعيين ملك الغرفة"""
        self.room_king = user_id
        if user_id in self.users_data:
            self.users_data[user_id]["user_type"] = "room_king"
            self._save_users_data()
        self._save_moderators_data()
        return True

    def set_room_queen(self, user_id: str):
        """تعيين ملكة الغرفة"""
        self.room_queen = user_id
        if user_id in self.users_data:
            self.users_data[user_id]["user_type"] = "room_queen"
            self._save_users_data()
        self._save_moderators_data()
        return True

    def remove_room_king(self):
        """إزالة ملك الغرفة"""
        if self.room_king and self.room_king in self.users_data:
            self.users_data[self.room_king]["user_type"] = "visitor"
            self._save_users_data()
        self.room_king = None
        self._save_moderators_data()
        return True

    def remove_room_queen(self):
        """إزالة ملكة الغرفة"""
        if self.room_queen and self.room_queen in self.users_data:
            self.users_data[self.room_queen]["user_type"] = "visitor"
            self._save_users_data()
        self.room_queen = None
        self._save_moderators_data()
        return True

    def get_permission_text(self, user: User):
        """
        نص الصلاحيات للمستخدم
        
        Args:
            user (User): المستخدم
            
        Returns:
            str: نص يوضح صلاحيات المستخدم
        """
        user_type = self.get_user_type(user)

        permissions_text = {
            "visitor": "👤 زائر",
            "designer": "🎨 مصمم الغرفة",
            "moderator": "👮‍♂️ مشرف الغرفة", 
            "moderator_designer": "👮‍♂️🎨 مشرف ومصمم",
            "room_owner": "👑 مالك الغرفة",
            "room_king": "🤴 ملك الغرفة",
            "room_queen": "👸 ملكة الغرفة",
            "bot_developer": "🔱 مطور البوت"
        }

        return permissions_text.get(user_type, "👤 زائر")

    def mark_user_offline(self, user_id: str):
        """تسجيل خروج المستخدم"""
        if user_id in self.users_data:
            self.users_data[user_id]["is_active"] = False
            self.users_data[user_id]["last_seen"] = datetime.now().isoformat()
            self._save_users_data()

    def get_online_users(self):
        """الحصول على المستخدمين المتصلين"""
        online_users = {}
        for user_id, data in self.users_data.items():
            if data.get("is_active", False):
                online_users[user_id] = data
        return online_users

    def get_user_stats(self):
        """إحصائيات المستخدمين"""
        total_users = len(self.users_data)
        online_users = len(self.get_online_users())
        real_moderators = len(self.room_moderators) if self.room_moderators else 0

        return {
            "total_users": total_users,
            "online_users": online_users,
            "moderators": real_moderators,
            "room_owner": 1 if self.room_owner else 0,
            "room_king": 1 if self.room_king else 0,
            "room_queen": 1 if self.room_queen else 0
        }

    def add_moderator(self, user_id: str):
        """إضافة مشرف جديد"""
        if user_id not in self.room_moderators:
            self.room_moderators.append(user_id)
            self.set_user_type(user_id, "moderator")
            self._save_moderators_data()
            return True
        return False

    def remove_moderator(self, user_id: str):
        """إزالة مشرف"""
        if user_id in self.room_moderators:
            self.room_moderators.remove(user_id)
            self.set_user_type(user_id, "visitor")
            self._save_moderators_data()
            return True
        return False

    def get_all_moderators(self):
        """الحصول على قائمة جميع المشرفين"""
        moderators_info = []
        for mod_id in self.room_moderators:
            user_data = self.get_user_info(mod_id)
            if user_data:
                moderators_info.append({
                    "user_id": mod_id,
                    "username": user_data.get("username", "غير معروف"),
                    "user_type": user_data.get("user_type", "moderator")
                })
        return moderators_info

# مثال على كيفية الاستخدام
"""
# في البوت الخاص بك:

from user_recognition_system import UserRecognitionSystem

class MyBot(BaseBot):
    def __init__(self):
        super().__init__()
        # تهيئة نظام التعرف على المستخدمين
        self.user_system = UserRecognitionSystem("my_bot_data")
    
    async def on_user_join(self, user: User, position: Position):
        # تسجيل المستخدم عند دخوله
        user_data = self.user_system.register_user(user)
        
        # فحص صلاحياته من إعدادات الغرفة
        user_type = await self.user_system.check_room_privileges(self, user)
        
        # ترحيب مخصص حسب نوع المستخدم
        permission_text = self.user_system.get_permission_text(user)
        await self.highrise.chat(f"مرحباً {user.username} - {permission_text}")
    
    async def on_chat(self, user: User, message: str):
        # فحص الصلاحيات قبل تنفيذ أوامر الإشراف
        if message.startswith("كتم"):
            if self.user_system.check_permissions(user, "moderate"):
                # تنفيذ أمر الكتم
                pass
            else:
                await self.highrise.send_whisper(user.id, "❌ ليس لديك صلاحية لهذا الأمر")
"""
